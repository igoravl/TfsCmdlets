# This is a basic workflow to help you get started with Actions

name: CI

env:
  Config: Release
  Debug: ${{ false }}
  
# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  Build:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Dump environment variables
        run: "dir env:"
        shell: pwsh
        if: env.Debug 
      - name: Dump GitHub objects
        run: |
          echo @'
            ${{ toJSON(github) }}
          '@
        shell: pwsh
        if: env.Debug 
      # - name: Build module
      #   run: ./Build.ps1 -Targets Package -Config ${{ env.Config }} -Verbose:$${{ env.Debug }}
      #   shell: pwsh
      # - name: Publish Nuget
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: nuget
      #     path: "out/Nuget/*.nupkg"
      # - name: Publish Chocolatey
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: chocolatey
      #     path: "out/Chocolatey/*.nupkg"
      # - name: Publish Portable
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: portable
      #     path: "out/Portable/*.zip"
      # - name: Publish MSI
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: msi
      #     path: "/out/msi/*"
      # - name: Publish Docs
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: docs
      #     path: "out/docs/*.zip"
      # - name: Publish Release Notes
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: releasenotes
      #     path: "out/docs/ReleaseNotes/**"
  Staging:
    runs-on: ubuntu-latest
    environment: staging
    needs: [ Build ]
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Remove stale draft releases
        run: |
          Install-Module PowerShellForGitHub -Scope CurrentUser -Force
          $releases = (Get-GitHubRelease -OwnerName igoravl -RepositoryName TfsCmdlets -AccessToken $token | ? Draft -eq $true)
          $releases
      - name: Create Draft Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Changes in this Release
            - First Change
            - Second Change
          draft: true
          prerelease: true

  Release: 
    runs-on: ubuntu-latest
    environment: production
    needs: [ Staging ]
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps: 
      - name: List releases
        run: echo TBD

  Site:
    runs-on: ubuntu-latest
    needs: [ Release ]
    steps:
      - name: Publish artifact
        run: echo TBD

  PSGallery:
    runs-on: ubuntu-latest
    needs: [ Release ]
    steps:
      - name: Publish artifact
        run: echo TBD

  Nuget:
    runs-on: ubuntu-latest
    needs: [ Release ]
    steps:
      - name: Publish artifact
        run: echo TBD

  Chocolatey:
    runs-on: ubuntu-latest
    needs: [ Release ]
    steps:
      - name: Publish artifact
        run: echo TBD

  Announcement:
    runs-on: ubuntu-latest
    needs: [ Nuget, PSGallery, Chocolatey, Site ]
    steps:
      - name: Announce release
        run: echo TBD
        