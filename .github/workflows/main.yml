name: Build

env:
  Config: Release
  Debug: ${{ false }}
  
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:

  Build:

    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Dump environment variables
        run: "dir env:"
        shell: pwsh
        if: env.Debug 
      - name: Dump GitHub objects
        run: |
          echo @'
            ${{ toJSON(github) }}
          '@
        shell: pwsh
        if: env.Debug 
      - name: Build module
        id: build_module
        if: ${{ false }}
        shell: pwsh
        run: |
          ./Build.ps1 -Targets Package -Config ${{ env.Config }} -Verbose:$${{ env.Debug }}
      - name: Publish Nuget
        uses: actions/upload-artifact@v2
        with:
          name: nuget
          path: "out/Nuget/*.nupkg"
      - name: Publish Chocolatey
        uses: actions/upload-artifact@v2
        with:
          name: chocolatey
          path: "out/Chocolatey/*.nupkg"
      - name: Publish Portable
        uses: actions/upload-artifact@v2
        with:
          name: portable
          path: "out/Portable/*.zip"
      - name: Publish MSI
        uses: actions/upload-artifact@v2
        with:
          name: msi
          path: "out/msi/*"
      - name: Publish Docs
        uses: actions/upload-artifact@v2
        with:
          name: docs
          path: "out/docs/*.zip"
      - name: Publish Release Notes
        uses: actions/upload-artifact@v2
        with:
          name: releasenotes
          path: "docs/ReleaseNotes/**"
    outputs:
      BUILD_NAME: ${{ steps.build_module.outputs.BUILD_NAME }}

  Staging:

    runs-on: ubuntu-latest
    environment: staging
    needs: [ Build ]
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      BUILD_NAME: ${{ needs.Build.outputs.BUILD_NAME }}
    steps:
      - name: Remove stale draft releases
        shell: pwsh
        run: |
          Install-Module PowerShellForGitHub -Scope CurrentUser -Force
          Set-GitHubConfiguration -SuppressTelemetryReminder
          $ghCreds = New-Object System.Management.Automation.PSCredential @(
            "pat",
            (ConvertTo-SecureString -String $env:GITHUB_TOKEN -AsPlainText -Force)
          )
          Set-GitHubAuthentication -Credential $ghCreds -SessionOnly

          #TODO: Limit scope to this pull request (filter by PR name)

          Get-GitHubRelease -OwnerName igoravl -RepositoryName TfsCmdlets `
          | Where-Object Draft -eq $true `
          | Remove-GitHubRelease -Force
      - name: Download release notes
        uses: actions/download-artifact@v2
        with:
          name: releasenotes
      - name: Extract release notes
        id: extract_release_notes
        shell: pwsh
        run: |
          $fileName = (Get-ChildItem [0-9]*.md -Recurse | Sort-Object Name | Select -ExpandProperty FullName -Last 1)
          $releaseNotes = ((Get-Content $fileName -Encoding UTF8 -Raw) -Replace "`r?`n", '%0D')
          Write-Output "::set-output name=RELEASE_NOTES::$releaseNotes"
      - name: Create Draft Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ env.BUILD_NAME }}
          body: ${{ env.RELEASE_NOTES }}
          draft: true
          prerelease: true
    outputs:
      BUILD_NAME: ${{ needs.Build.outputs.BUILD_NAME }}
      RELEASE_NOTES: ${{ steps.extract_release_notes.outputs.RELEASE_NOTES }}

  Release: 

    runs-on: ubuntu-latest
    environment: production
    needs: [ Staging ]
    #if: ${{ github.event_name != 'pull_request' }}
    env:
      BUILD_NAME: ${{ needs.Staging.outputs.BUILD_NAME }}
    steps: 
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.8.0
        with:
          access_token: ${{ github.token }}
    outputs:
      BUILD_NAME: ${{ needs.Staging.outputs.BUILD_NAME }}
      RELEASE_NOTES: ${{ needs.Staging.outputs.RELEASE_NOTES }}

  Site:

    runs-on: ubuntu-latest
    needs: [ Release ]
    env:
      BUILD_NAME: ${{ needs.Release.outputs.BUILD_NAME }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          path: site
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: docs
      - name: Publish site
        run: |
          cd site && mkdir docs && pushd docs
          git checkout --track origin/gh-pages
          unzip -o ../../TfsCmdlets-Docs-*.zip
          popd
          sed -i "s/_BUILDVERSION_/${BUILD_NAME}/g" _config.yml
          sed -i "s/_BUILDDATE_/$(date +%F)/g" _config.yml
          git config --local user.name "Igor Abade"
          git config --local user.email igoravl@gmail.com
          git add *
          git commit -m "Publish version $BUILD_NAME"
          git push

  PSGallery:

    runs-on: ubuntu-latest
    needs: [ Release ]
    if: ${{ github.event_name != 'pull_request' }}
    env:
      RELEASE_NOTES: ${{ needs.Release.outputs.RELEASE_NOTES }}
      PSGALLERY_KEY: ${{ secrets.PSGALLERY_KEY }}
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: portable
      - name: Publish artifact
        shell: pwsh
        run: |
          Install-Module PackageManagement -Scope CurrentUser -Force
          Install-Module PowerShellGet -Scope CurrentUser -Force

          Expand-Archive portable/*.zip -DestinationPath Module/TfsCmdlets

          $releaseNotes = @"
          $($env:ReleaseNotes.Replace('\n', [Environment]::NewLine))
          "@

          Publish-Module -Name Module/TfsCmdlets -NuGetApiKey $env:PSGALLERY_KEY -AllowPreRelease -ReleaseNotes $releaseNotes

  Nuget:

    runs-on: ubuntu-latest
    needs: [ Release ]
    if: ${{ github.event_name != 'pull_request' }}
    steps:
      - name: Publish artifact
        run: echo TBD

  Chocolatey:

    runs-on: ubuntu-latest
    needs: [ Release ]
    if: ${{ github.event_name != 'pull_request' }}
    steps:
      - name: Publish artifact
        run: echo TBD

  Announcement:

    runs-on: ubuntu-latest
    needs: [ Nuget, PSGallery, Chocolatey, Site ]
    steps:
      - name: Announce release
        run: echo TBD
        