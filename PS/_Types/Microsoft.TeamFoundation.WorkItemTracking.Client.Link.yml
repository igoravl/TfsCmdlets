- ScriptProperty:
    Name: LinkType
    GetScriptBlock: >-
      function _GetBuildArtifactKind($type, $id)
          {
          return 'Build'
          }

          function _GetRequirementsArtifactKind($type, $id)
          {
          return 'Storyboard'
          }

          function _GetGitArtifactKind($type, $id)
          {
          if ($type -eq 'Ref')
          {
          $pathSegments = $id -split '%2F'
          if ($pathSegments[2].StartsWith('GB'))
          {
          $type = 'Branch'
          }
          elseif ($pathSegments[2].StartsWith('GT'))
          {
          $type = 'Tag'
          }
          }

          return $type
          }

          function _GetTestManagementArtifactKind($type, $id)
          {
          if ($type -like 'TcmResultAttachment*')
          {
          return 'Test Result Attachment'
          }
          if ($type -like 'TcmResult*')
          {
          return 'Test Result'
          }
          return $type
          }

          function _GetVersionControlArtifactKind($type, $id)
          {
          if ($type -ne 'Changeset')
          {
          return 'Versioned Item'
          }
          return 'Changeset'
          }

          function _GetExternalLinkTypeName($link)
          {
          if ($link.LinkedArtifactUri -like 'vstfs:///*')
          {
          $uri = [uri] $link.LinkedArtifactUri
          $artifactKind = $uri.Segments[1] -replace '/', ''
          $func = "_Get$($artifactKind)ArtifactKind"
          return & $func ($uri.Segments[2] -replace '/', '') $uri.Segments[3]
          }
          return 'External'
          }

          try
          {
          switch($this.BaseType)
          {
          'RelatedLink'  { $this.LinkTypeEnd.Name }
          'WorkItemLink'  { $this.LinkTypeEnd.Name }
          'ExternalLink' { _GetExternalLinkTypeName $this }
          default { $this.BaseType }
          }
          }
          catch
          {
          $_.Exception.ToString()
          }
- ScriptProperty:
    Name: LinkTarget
    GetScriptBlock: >-
      function _GetOwner($link)
          {
          $field = $link.GetType().GetField('m_item', [System.Reflection.BindingFlags]::NonPublic -bor [System.Reflection.BindingFlags]::Instance)
          if ($field)
          {
          return $field.GetValue($link)
          }
          throw 'm_item private field not found in link $($link.GetType().FullName)'
          }

          function _GetTpc($link)
          {
          $wi = _GetOwner $link
          return $wi.Store.TeamProjectCollection
          }

          function _GetBuildArtifactTarget($type, $id)
          {
          return $id
          }

          function _GetRequirementsArtifactTarget($type, $id)
          {
          return [System.Net.WebUtility]::UrlDecode($id)
          }

          function _GetGitArtifactTarget($type, $id)
          {
          $pathSegments = $id -split '%2F'

          if ($pathSegments.Count -ne 3)
          {
          return $id
          }

          $id = $pathSegments[2]

          if ($pathSegments[2].StartsWith('GB') -or $pathSegments[2].StartsWith('GT'))
          {
          $id = $pathSegments[2].Substring(2)
          }

          return $id
          }

          function _GetTestManagementArtifactTarget($type, $id, $link)
          {
            return $link.LinkedArtifactUri
          }

          function _GetVersionControlArtifactTarget($type, $id, $link)
          {
          if ($type -eq 'VersionedItem')
          {
          (0..2) | Foreach-Object { $id = [System.Net.WebUtility]::UrlDecode($id) }
          $id = $id -split '&'
              return "`$/$($id[0]) ($($id[1]), $($id[2]))"
            }

            if ($type -eq 'LatestItemVersion')
            {
              $tpc = _GetTpc $link
              $vcs = $tpc.GetService([type]"Microsoft.TeamFoundation.VersionControl.Client.VersionControlServer")
              $item = $vcs.GetItem([int]$id,$vcs.GetLatestChangesetId())
              return "$($item.ServerItem) (latest version)"
            }
            
            return $id
          }

          function _GetExternalLinkLocation($link)
          {
            if ($link.LinkedArtifactUri -like 'vstfs:///*')
            {
              $uri = [uri] $link.LinkedArtifactUri
              $artifactKind = $uri.Segments[1] -replace '/', ''
              $func = "_Get$($artifactKind)ArtifactTarget"
              return & $func ($uri.Segments[2] -replace '/', '') $uri.Segments[3] $link
          }

          return $link.LinkedArtifactUri
          }

          try
          {
          switch($this.BaseType)
          {
          'HyperLink'  { $this.Location }
          'RelatedLink'  { "Work Item #$($this.RelatedWorkItemId)" }
          'ExternalLink' { _GetExternalLinkLocation $this }
          'WorkItemLink' { "Work Item #$($this.TargetId)" }
          default { '' }
          }
          }
          catch
          {
          $_.Exception.ToString()
          }
