using System.Collections.Generic;
using TfsCmdlets.Models;
using TfsCmdlets.Services;

#if NET471_OR_GREATER
using System;
using System.Linq;
using System.Threading;
using Microsoft.TeamFoundation.Client;
using Microsoft.TeamFoundation.Framework.Client;
using Microsoft.TeamFoundation.Framework.Common;
#endif

namespace TfsCmdlets.Cmdlets.TeamProjectCollection
{
    [Controller(typeof(TpcConnection))]
    internal class TeamProjectCollectionController : CollectionLevelController<TpcConnection>
    {

#if NET471_OR_GREATER
        private ServerConnection ServerConnection { get; }
#endif

        private ICurrentConnections CurrentConnections { get; set; }

        protected override IEnumerable<TpcConnection> DoGetItems(ParameterDictionary parameters)
        {
            var current = parameters.Get<bool>("Current");

            if (current)
            {
                yield return CurrentConnections.Collection;
                yield break;
            }

            yield return Collection;
        }

        protected override TpcConnection DoConnectItem(ParameterDictionary parameters)
        {
            Collection.Connect();

            var srv = Collection.ConfigurationServer;

            CurrentConnections.Set(srv, Collection);

            Logger.Log($"Connected to {Collection.Uri}, ID {Collection.ServerId}, as '{Collection.AuthorizedIdentity.DisplayName}'");

            return Collection;
        }

        protected override void DoDisconnectItem(ParameterDictionary parameters)
        {
            CurrentConnections.Set(
                CurrentConnections.Server,
                null
            );
        }

        protected override TpcConnection DoNewItem(ParameterDictionary parameters)
        {
#if NET471_OR_GREATER
            if (!PowerShell.ShouldProcess(Collection, "Create team project collection")) return null;

            var configServer = ServerConnection;
            var collectionName = parameters.Get<string>(nameof(NewTeamProjectCollection.Collection));
            var databaseServer = parameters.Get<string>(nameof(NewTeamProjectCollection.DatabaseServer));
            var databaseName = parameters.Get<string>(nameof(NewTeamProjectCollection.DatabaseName));
            var description = parameters.Get<string>(nameof(NewTeamProjectCollection.Description));
            var useExistingDatabase = parameters.Get<bool>(nameof(NewTeamProjectCollection.UseExistingDatabase));
            var isDefault = parameters.Get<bool>(nameof(NewTeamProjectCollection.Default));
            var connectionString = parameters.Get<string>(nameof(NewTeamProjectCollection.ConnectionString));
            var pollingInterval = parameters.Get<int>(nameof(NewTeamProjectCollection.PollingInterval));
            var timeout = parameters.Get<TimeSpan>(nameof(NewTeamProjectCollection.Timeout));

            Enum.TryParse<TeamFoundationServiceHostStatus>(parameters.Get<string>(nameof(NewTeamProjectCollection.InitialState)),
                out var initialState);

            var tpcService = configServer
                .GetService<ITeamProjectCollectionService>();

            var servicingTokens = new Dictionary<string, string>()
            {
                ["SharePointAction"] = "None",
                ["ReportingAction"] = "None"
            };

            if (!string.IsNullOrEmpty(databaseName)) servicingTokens["CollectionDatabaseName"] = databaseName;
            if (useExistingDatabase) servicingTokens["UseExistingDatabase"] = useExistingDatabase.ToString();
            if (!string.IsNullOrEmpty(connectionString)) servicingTokens["CollectionDatabaseName"] = databaseName;
            if (!string.IsNullOrEmpty(databaseServer)) connectionString = $"Data source={databaseServer}; Integrated Security=true";

            var tpcJob = tpcService.QueueCreateCollection(
                collectionName,
                description,
                isDefault,
                $"~/{collectionName}/",
                initialState,
                servicingTokens,
                connectionString,
                null,
                null);

            var start = DateTime.Now;

            while (DateTime.Now.Subtract(start) < timeout)
            {
                Thread.Sleep(pollingInterval);

                var collectionInfo = tpcService.GetCollection(tpcJob.HostId,
                    ServiceHostFilterFlags.IncludeAllServicingDetails);

                var jobDetail = collectionInfo.ServicingDetails.FirstOrDefault(job => job.JobId == tpcJob.JobId);

                if (jobDetail == null) return GetItem(parameters);

                switch (jobDetail.JobStatus)
                {
                    case ServicingJobStatus.Unknown:
                    case ServicingJobStatus.Queued:
                    case ServicingJobStatus.Running:
                        continue;
                    case ServicingJobStatus.Failed:
                        throw new Exception($"Error creating team project collection {collectionName}");
                    case ServicingJobStatus.Complete:
                        GetItem(parameters);
                        break;
                    default:
                        throw new ArgumentOutOfRangeException();
                }
            }

            throw new TimeoutException($"Operation timed out during creation of team project collection {Collection}");
#else
            return null;
#endif
        }

        protected override void DoDismountItem(ParameterDictionary parameters)
        {
#if NET471_OR_GREATER
            var tpc = Collection;
            var srv = tpc.ConfigurationServer;
            var reason = parameters.Get<string>(nameof(DismountTeamProjectCollection.Reason));
            var timeout = parameters.Get<TimeSpan>(nameof(DismountTeamProjectCollection.Timeout));

            if (!PowerShell.ShouldProcess($"Server '{srv.Uri}'", $"Detach collection '{tpc.DisplayName}'")) return;

            var tpcService = srv.GetService<Microsoft.TeamFoundation.Framework.Client.ITeamProjectCollectionService>();
            var collectionInfo = tpcService.GetCollection(tpc.InnerConnection.InstanceId);

            var tpcJob = tpcService.QueueDetachCollection(collectionInfo, null, reason, out var connectionString);
            collectionInfo = tpcService.WaitForCollectionServicingToComplete(tpcJob, timeout);

            PowerShell.WriteObject(connectionString);
#endif
        }

        protected override void DoMountItem(ParameterDictionary parameters)
        {
#if NET471_OR_GREATER
            var configServer = (TfsConfigurationServer)ServerConnection;
            var tpcService = configServer.GetService<ITeamProjectCollectionService>();

            var collectionName = parameters.Get<string>(nameof(MountTeamProjectCollection.Collection));
            var servicingTokens = new Dictionary<string, string>();
            var databaseServer = parameters.Get<string>(nameof(MountTeamProjectCollection.DatabaseServer));
            var databaseName = parameters.Get<string>(nameof(MountTeamProjectCollection.DatabaseName));
            var description = parameters.Get<string>(nameof(MountTeamProjectCollection.Description));
            var connectionString = parameters.Get<string>(nameof(MountTeamProjectCollection.ConnectionString));
            var timeout = parameters.Get<TimeSpan>(nameof(MountTeamProjectCollection.Timeout));
            var clone = parameters.Get<bool>(nameof(MountTeamProjectCollection.Clone));

            if (!string.IsNullOrEmpty(databaseServer))
            {
                servicingTokens["CollectionDatabaseName"] = databaseName;
                connectionString = $"Data source={databaseServer}; Integrated Security=true; Initial Catalog={databaseName}";
            }

            var tpcJob = tpcService.QueueAttachCollection(
                connectionString,
                servicingTokens, clone,
                collectionName,
                description,
                $"~/{Collection}/");

            var collection = tpcService.WaitForCollectionServicingToComplete(tpcJob, timeout);

            PowerShell.WriteObject(GetItem(new { Collection = collectionName }));
#endif
        }

#if NET471_OR_GREATER
        public TeamProjectCollectionController(
            ServerConnection server,
            ICurrentConnections currentConnections,
            TpcConnection collection,
            ILogger logger,
            IParameterManager parameterManager,
            IPowerShellService powerShell)
            : base(collection, logger, parameterManager, powerShell)
        {
            ServerConnection = server;
            CurrentConnections = currentConnections;
        }
#else
        public TeamProjectCollectionController(
            ICurrentConnections currentConnections,
            TpcConnection collection,
            ILogger logger,
            IParameterManager parameterManager,
            IPowerShellService powerShell)
            : base(collection, logger, parameterManager, powerShell)
        {
            CurrentConnections = currentConnections;
        }
#endif
    }
}