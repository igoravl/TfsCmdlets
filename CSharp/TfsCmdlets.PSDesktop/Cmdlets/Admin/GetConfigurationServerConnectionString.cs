/*
.SYNOPSIS
    Gets the configuration server database connection string.

.PARAMETER Computer
    Specifies the name of a Team Foundation Server application tier from which to retrieve the connection string

.PARAMETER Version
    Specifies the version of the Team Foundation Server being queried. Valid values are "12.0" (TFS 2013), "14.0" (TFS 2015), "15.0" (TFS 2017)

.PARAMETER Credential
    Specifies a user account that has permission to perform this action. The default is the credential of the user under which the PowerShell process is being run - in most cases that corresponds to the user currently logged in.nnType a user name, such as "User01" or "Domain01\User01", or enter a PSCredential object, such as one generated by the Get-Credential cmdlet. If you type a user name, you will be prompted for a password.nnTo connect to Visual Studio Team Services you must either: enable Alternate Credentials for your user profile and supply that credential in this argument or omit this argument to have a logon being dialog displayed automatically.nnFor more information on Alternate Credentials for your Visual Studio Team Services account, please refer to https://msdn.microsoft.com/library/dd286572#setup_basic_auth.
*/

using System.Management.Automation;

namespace TfsCmdlets.Cmdlets.ConfigServer
{
    [Cmdlet(VerbsCommon.Get, "ConfigurationServerConnectionString")]
	[OutputType(typeof(string))]
    public class GetConfigurationServerConnectionString: BaseCmdlet
    {
/*
		[Parameter()]
		[string]
		[Alias("Session")]
		Computer,

		[Parameter()]
		[ValidateSet("12.0", "14.0", "15.0")]
		public string Version { get; set; }

		[Parameter()]
		[System.Management.Automation.Credential()]
		[System.Management.Automation.PSCredential]
		Credential = System.Management.Automation.PSCredential.Empty

	protected override void ProcessRecord()
	{

		scriptBlock = _NewScriptBlock -EntryPoint "_GetConnectionString" -Dependency "Get-InstallationPath", "_TestRegistryValue", "_GetRegistryValue"

		WriteObject(_InvokeScriptBlock -ScriptBlock scriptBlock -Computer Computer -Credential Credential -ArgumentList Version); return;
	}
}

Function _GetConnectionString(Version)
{
	path = Get-InstallationPath -Version Version -Component ApplicationTier
	webConfigPath = Join-Path path "Web Services/Web.config"
	webConfig = [xml] (Get-Content webConfigPath)

	WriteObject((Select-Xml -Xml webConfig -XPath "/configuration/appSettings/add[@key="applicationDatabase"]/@value").Node.Value); return;
}
*/
    protected override void EndProcessing() => throw new System.NotImplementedException();
    }
}
