#define GET_COLLECTION(TPC) TPC = Get-TfsTeamProjectCollection -Collection $Collection; if (-not TPC -or (TPC.Count -ne 1)) {throw "Invalid or non-existent team project collection $Collection."}
#define GET_TEAM_PROJECT(TP,TPC) TP = Get-TfsTeamProject -Project $Project -Collection $Collection; if (-not TP -or (TP.Count -ne 1)) {throw "Invalid or non-existent team project $Project."}; TPC = TP.Store.TeamProjectCollection
#define GET_TEAM_PROJECT_FROM_ITEM(TP,TPC,ITEM) if(ITEM) {$Project = ITEM}; GET_TEAM_PROJECT(TP,TPC)
#define CHECK_ITEM(ITEM_NAME) if (ITEM_NAME -is [ITEM_TYPE]) { _Log "Input item is of type ITEM_TYPE; returning input item immediately, without further processing."; return ITEM_NAME }
#define GET_CLIENT(TYPE_NAME) $client = _GetRestClient TYPE_NAME -Collection $tpc
#define GET_TEAM(T,TP,TPC) T = Get-TfsTeam -Team $Team -Project $Project -Collection $Collection; if (T.Count -ne 1) {throw "Invalid or non-existent team '$Team'."}; GET_TEAM_PROJECT_FROM_ITEM(TP,TPC,T.ProjectName)
#define GET_STRUCTURE_GROUP if(-not ($PSBoundParameters.ContainsKey('StructureGroup'))){if ($MyInvocation.InvocationName -like '*Area'){$StructureGroup = [Microsoft.TeamFoundation.WorkItemTracking.WebApi.Models.TreeStructureGroup]::Areas}elseif ($MyInvocation.InvocationName -like '*Iteration'){$StructureGroup = [Microsoft.TeamFoundation.WorkItemTracking.WebApi.Models.TreeStructureGroup]::Iterations}else{throw "Invalid or missing StructureGroup argument"}}